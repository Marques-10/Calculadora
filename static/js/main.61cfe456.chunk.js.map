{"version":3,"sources":["components/Calculadora/index.jsx","fonts/Roboto-Regular.ttf","App.js","serviceWorker.js","index.js"],"names":["initialState","displayValue","clearDisplay","operation","values","indice","Calculadora","props","state","clearMemory","this","setState","valueDisplay","substring","length","equals","stateOperation","Math","round","eval","e","number","console","log","toString","includes","parseFloat","className","class","onClick","setOperation","setNumber","Component","module","exports","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.61cfe456.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './index.css'\r\n\r\nconst initialState = {\r\n    displayValue: '0',\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [0, 0],\r\n    indice: 0,\r\n}\r\n\r\nexport default class Calculadora extends Component {\r\n    \r\n    state = {...initialState}\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.clearMemory()\r\n    \r\n    }\r\n\r\n    clearMemory() {\r\n        this.setState({ ...initialState })\r\n    }\r\n\r\n    setOperation(operation) {\r\n        \r\n        if (operation == 'X') {\r\n            const indice = this.state.indice\r\n            const values = [ ...this.state.values ]\r\n\r\n            let valueDisplay = this.state.displayValue\r\n            valueDisplay = valueDisplay.substring(0,(valueDisplay.length - 1));\r\n            values[indice] = valueDisplay\r\n            \r\n            this.setState({\r\n                displayValue: valueDisplay,\r\n                indice,\r\n                values,\r\n            })\r\n\r\n            return\r\n        }\r\n\r\n        if (operation == 'CE') {\r\n            const indice = this.state.indice\r\n            const values = [ ...this.state.values ]\r\n\r\n            let valueDisplay = 0\r\n            values[indice] = 0\r\n\r\n            this.setState({\r\n                displayValue: valueDisplay,\r\n                values,\r\n                indice,\r\n            })\r\n\r\n            return\r\n        }\r\n\r\n        if (this.state.indice === 0) {\r\n            \r\n            this.setState({\r\n                operation,\r\n                indice: 1,\r\n                clearDisplay: true,\r\n            })\r\n        \r\n        } else {\r\n\r\n            const equals = operation == '='\r\n            const stateOperation = this.state.operation\r\n            \r\n            const values = [ ...this.state.values ]\r\n            \r\n            try {\r\n                values[0] = Math.round(eval(`${values[0]} ${stateOperation} ${values[1]}`) * 100) / 100\r\n                values[1] = 0\r\n            } catch(e) {\r\n                values[0] = this.state.values[0]\r\n            }\r\n            \r\n            this.setState({ \r\n                displayValue: values[0],\r\n                values,\r\n                operation: operation == '=' ? null : operation,\r\n                indice: operation == '=' ? 0 : 1,\r\n                clearDisplay: !equals,\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    setNumber(number) {\r\n        const indice = this.state.indice\r\n        console.log(indice)\r\n        \r\n        if (number === '.') {\r\n            \r\n            const indice = this.state.indice\r\n            const values = [ ...this.state.values ]\r\n            const valueDisplay = this.state.values[indice].toString()\r\n\r\n            console.log(valueDisplay)\r\n\r\n            if(valueDisplay.includes('.')) {\r\n                return\r\n            } else {\r\n                if (valueDisplay == '0') {\r\n\r\n                    values[indice] = parseFloat('0') + '.'\r\n                    this.setState({\r\n                        displayValue: values[indice],\r\n                        clearDisplay: false,\r\n                        values,\r\n                    }) \r\n                } else {\r\n                    values[indice] = valueDisplay + '.'\r\n\r\n                    this.setState({\r\n                        displayValue: values[indice],\r\n                        clearDisplay: false,\r\n                        values,\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        const clearDisplay = this.state.displayValue == '0' || this.state.clearDisplay\r\n        const valueTime = clearDisplay ? '' : this.state.displayValue\r\n\r\n        const valueDisplay = valueTime + number\r\n        \r\n        if (number !== '.') {\r\n            const indice = this.state.indice\r\n            const values = [ ...this.state.values ]\r\n            \r\n            values[indice] = parseFloat(valueDisplay)\r\n\r\n            console.log('Value: ',valueDisplay, \"Array: \", values)\r\n            this.setState({\r\n                displayValue: valueDisplay,\r\n                clearDisplay: false,\r\n                values,\r\n            })\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"topo\">\r\n                    <div>Calculadora</div>\r\n                </div>\r\n\r\n                <div className=\"menu\">\r\n                    <div className=\"menu-left\">\r\n                        <div><button><i class=\"icon-windows\"></i></button></div>\r\n                        <div className=\"text-default\">Padr√£o</div>\r\n                    </div>\r\n                    <div className=\"menu-right\"><i class=\"icon-time\"></i></div>\r\n                </div>\r\n\r\n                <div className=\"display\">{this.state.displayValue}</div>\r\n\r\n                <div className=\"numbers\">\r\n                    <div>\r\n                        <button onClick={() => this.setOperation('CE')}>CE</button>\r\n                        <button onClick={() => this.clearMemory('C')}>C</button>\r\n                        <button onClick={() => this.setOperation('X')}>X</button>\r\n                        <button onClick={() => this.setOperation('/')}>/</button>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={() => this.setNumber('7')}>7</button>\r\n                        <button onClick={() => this.setNumber('8')}>8</button>\r\n                        <button onClick={() => this.setNumber('9')}>9</button>\r\n                        <button onClick={() => this.setOperation('*')}>*</button>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={() => this.setNumber('4')}>4</button>\r\n                        <button onClick={() => this.setNumber('5')}>5</button>\r\n                        <button onClick={() => this.setNumber('6')}>6</button>\r\n                        <button onClick={() => this.setOperation('-')}>-</button>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={() => this.setNumber('3')}>3</button>\r\n                        <button onClick={() => this.setNumber('2')}>2</button>\r\n                        <button onClick={() => this.setNumber('1')}>1</button>\r\n                        <button onClick={() => this.setOperation('+')}>+</button>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={() => this.setNumber('0')}>0</button>\r\n                        <button onClick={() => this.setNumber('.')}>.</button>\r\n                        <button onClick={() => this.setOperation('=')} className=\"equal\">=</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"static/media/Roboto-Regular.11eabca2.ttf\";","import React from 'react';\r\nimport Calculadora from './components/Calculadora/index.jsx'\r\nimport './fonts/Roboto-Regular.ttf'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Calculadora />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}